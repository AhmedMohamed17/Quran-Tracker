import { useState, useEffect } from "react";
import { motion } from "framer-motion";
import { initializeApp } from "firebase/app";
import { getFirestore, doc, setDoc, onSnapshot } from "firebase/firestore";
import "./styles.css";

const firebaseConfig = {
  apiKey: "AIzaSyAeRi74HEvd7VhkSg-XgOSHGiJ5tGq4ZCo",
  authDomain: "quran-7ea22.firebaseapp.com",
  projectId: "quran-7ea22",
  storageBucket: "quran-7ea22.firebasestorage.app",
  messagingSenderId: "1054447362065",
  appId: "1:1054447362065:web:292326c26abc0b3d5911b0",
  measurementId: "G-ERWQNNV6VT",
};

const app = initializeApp(firebaseConfig);
const db = getFirestore(app);

const prayers = [
  "ุงูููููููู ุงุบูุณููููู ููู ุงูุฐููุจุ ููุทููููุฑููู ูููู ุงููุนููููุจู",
  "ุงููููููููู ุงุฑูุฒูููููู ุงูุณููุชูุฑู ููุงููุนูููุงููุ ููุฃูููุจูุณูููู ููุจูุงุณู ุงูููููููุนู ูู ุงููููููุงูู",
  "ุงูููู ุงุบูุฑ ูููุคูููู ูุงููุคููุงุชุ ุงูุฃุญูุงุก ูููู ูุงูุฃููุงุช.",
  "ุงูููู ุงุฌุนููุง ูู ุฃูู ุงูุฌูุฉุ ูุงุฌุนููุง ูู ุฃูู ุงูุฏุนุงุก.",
  "ุงูููู ุงุฑุฒููุง ุชูุจุฉ ูุตูุญูุงุ ูุงุบูุฑ ููุง ูุง ุชูุฏู ูู ุฐูุจูุง ููุง ุชุฃุฎุฑ.",
  "ุงูููู ุงุฌุนููุง ูู ุงูุฐูู ูุณุชูุนูู ุงูููู ููุชุจุนูู ุฃุญุณูู.",
  "ุงูููู ุงุญูุธูุง ูู ูู ุดุฑ ููู ูู ูุฑุถุ ูุงุฌุนููุง ูู ุงููุงุฆุฒูู ูู ุงูุฏููุง ูุงูุขุฎุฑุฉ.",
  "ุงูููู ูู ุงูุญูุฏ ุญุชู ุชุฑุถูุ ููู ุงูุญูุฏ ุฅุฐุง ุฑุถูุช",
  "ุงุณุชุบูุฑ ุงููู",
  "ููู ุงูุญูุฏููู",
];

const parts = Array.from({ length: 30 }, (_, i) => i + 1);
const colors = [
  "#f87171",
  "#60a5fa",
  "#34d399",
  "#facc15",
  "#a78bfa",
  "#f472b6",
  "#818cf8",
  "#14b8a6",
  "#fb923c",
  "#84cc16",
  "#10b981",
  "#06b6d4",
  "#f43f5e",
  "#d946ef",
  "#8b5cf6",
  "#f59e0b",
  "#0ea5e9",
  "#6b7280",
];

export default function KhatmaTracker() {
  const [selectedParts, setSelectedParts] = useState({});
  const [userNames, setUserNames] = useState({});
  const [userColors, setUserColors] = useState({});
  const [currentUser, setCurrentUser] = useState("");
  const [currentColor, setCurrentColor] = useState("");
  const [inputName, setInputName] = useState("");
  const [isCompleted, setIsCompleted] = useState(false);
  const [currentPrayer, setCurrentPrayer] = useState(prayers[0]);

  useEffect(() => {
    const unsubscribe = onSnapshot(
      doc(db, "khatmaData", "sharedData"),
      (docSnap) => {
        if (docSnap.exists()) {
          const data = docSnap.data();
          setSelectedParts(data.selectedParts || {});
          setUserNames(data.userNames || {});
          setUserColors(data.userColors || {});
        }
      }
    );
    return () => unsubscribe();
  }, []);

  useEffect(() => {
    setIsCompleted(Object.keys(selectedParts).length === 30);
  }, [selectedParts]);

  const saveData = async (updatedParts, updatedNames, updatedColors) => {
    await setDoc(doc(db, "khatmaData", "sharedData"), {
      selectedParts: updatedParts,
      userNames: updatedNames,
      userColors: updatedColors,
    });
  };

  const togglePart = async (part) => {
    if (!currentUser || !currentColor) {
      alert("ูุฑุฌู ุฅุฏุฎุงู ุงุณูู ูุงุฎุชูุงุฑ ููู ูุจู ุชุญุฏูุฏ ุฌุฒุก.");
      return;
    }
    if (selectedParts[part] && userNames[part] !== currentUser) {
      alert("ูุง ููููู ุชุนุฏูู ุงุฎุชูุงุฑ ูุณุชุฎุฏู ุขุฎุฑ.");
      return;
    }
    const updatedParts = { ...selectedParts };
    const updatedNames = { ...userNames };
    const updatedColors = { ...userColors };

    if (updatedParts[part]) {
      delete updatedParts[part];
      delete updatedNames[part];
      delete updatedColors[part];
    } else {
      updatedParts[part] = currentColor;
      updatedNames[part] = currentUser;
      updatedColors[part] = currentColor;
    }
    await saveData(updatedParts, updatedNames, updatedColors);
  };

  useEffect(() => {
    const interval = setInterval(() => {
      setCurrentPrayer(prayers[Math.floor(Math.random() * prayers.length)]);
    }, 10000);
    return () => clearInterval(interval);
  }, []);
  const handleLogin = () => {
    if (!inputName.trim()) {
      alert("ูุฑุฌู ุฅุฏุฎุงู ุงุณูู ุฃูููุง");
      return;
    }
    setCurrentUser(inputName);
  };
  const restart = async () => {
    await saveData({}, {}, {});
    setSelectedParts({});
    setUserNames({});
    setUserColors({});
    setIsCompleted(false);
  };
  return (
    <div className="container">
      <h2 className="title reem-kufi">
        ๐ฟ ุฎุชูุฉ ุนูู ุฑูุญ ูุณูุฉ ู ุฌููุน ุฃููุงุช ุงููุณูููู ุฌููุนุง ๐ฟ
      </h2>
      <p className="description reem-kufi">
        ุงูููู ุงุบูุฑ ููุง ูููู ูุงุฑุญููุง ูุงุณูููู ุฌููุนูุง ุงููุฑุฏูุณ ุงูุฃุนูู ูู ุงูุฌูุฉ ุจุฏูู
        ุญุณุงุจ ููุง ุณุงุจูุฉ ุนุฐุงุจุ ุงูููู ุขููู
      </p>

      {!currentUser ? (
        <div className="login-box">
          <input
            type="text"
            placeholder="ุฃุฏุฎู ุงุณูู ุงููุงูู"
            value={inputName}
            onChange={(e) => setInputName(e.target.value)}
            className="input reem-kufi"
          />
          <button className="button green reem-kufi" onClick={handleLogin}>
            ุชุณุฌูู ุงูุฏุฎูู
          </button>
        </div>
      ) : (
        <div className="user-info">
          <p className="reem-kufi">ูุฑุญุจูุงุ {currentUser}</p>
          <button
            className="button logout reem-kufi"
            onClick={() => {
              setCurrentUser("");
              setCurrentColor("");
            }}
          >
            ุชุณุฌูู ุงูุฎุฑูุฌ
          </button>
        </div>
      )}

      {currentUser && !currentColor && (
        <div className="color-picker">
          <p className="reem-kufi">ุงุฎุชุฑ ูููู ุงููููุฒ:</p>
          <div className="colors">
            {colors.map((color) => (
              <button
                key={color}
                className="color-btn"
                style={{ backgroundColor: color }}
                onClick={() => setCurrentColor(color)}
              />
            ))}
          </div>
        </div>
      )}

      <div className="grid">
        {parts.map((part) => (
          <motion.div
            key={part}
            whileTap={{ scale: 0.9 }}
            className="part-box reem-kufi"
            style={{ backgroundColor: selectedParts[part] || "#e2e8f0" }}
            onClick={() => togglePart(part)}
          >
            {part}
            {userNames[part] && <p className="user-name">{userNames[part]}</p>}
          </motion.div>
        ))}
      </div>

      {isCompleted && (
        <div className="completion-message">
          <p className="reem-kufi">ุชู ุฅููุงู ุงูุฎุชูุฉ! ๐</p>
        </div>
      )}

      {/* ุนุฑุถ ุงูุฏุนุงุก */}
      <motion.div
        className="prayer-box"
        initial={{ opacity: 0, x: "-100%" }}
        animate={{ opacity: 1, x: 0 }}
        transition={{ type: "spring", stiffness: 100, damping: 25 }}
      >
        <p className="reem-kufi">{currentPrayer}</p>
      </motion.div>

      {/* ุฒุฑ ูุฅุนุงุฏุฉ ุงูุจุฏุก */}
      {isCompleted && (
        <button className="button restart reem-kufi" onClick={restart}>
          ุงุจุฏุฃ ูู ุฌุฏูุฏ
        </button>
      )}

      {/* Footer */}
      <footer className="footer reem-kufi">
        <p>{ุฑูุจูู ุงุดูุฑูุญู ููู ุตูุฏูุฑูู * ููููุณููุฑู ููู ุฃูููุฑูู * ููุงุญููููู ุนูููุฏูุฉู ูููู ููุณูุงููู * ูููููููููุง ููููููู} [ุทู: 25- 28].</p>
      </footer>
    </div>
  );
}
