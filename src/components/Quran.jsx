import { useState, useEffect } from "react";
import { motion } from "framer-motion";
import "./styles.css";
const prayers = [
  "ุงูููู ุงุบูุฑ ูููุคูููู ูุงููุคููุงุชุ ุงูุฃุญูุงุก ูููู ูุงูุฃููุงุช.",
  "ุงูููู ุงุฌุนููุง ูู ุฃูู ุงูุฌูุฉุ ูุงุฌุนููุง ูู ุฃูู ุงูุฏุนุงุก.",
  "ุงูููู ุงุฑุฒููุง ุชูุจุฉ ูุตูุญูุงุ ูุงุบูุฑ ููุง ูุง ุชูุฏู ูู ุฐูุจูุง ููุง ุชุฃุฎุฑ.",
  "ุงูููู ุงุฌุนููุง ูู ุงูุฐูู ูุณุชูุนูู ุงูููู ููุชุจุนูู ุฃุญุณูู.",
  "ุงูููู ุงุญูุธูุง ูู ูู ุดุฑ ููู ูู ูุฑุถุ ูุงุฌุนููุง ูู ุงููุงุฆุฒูู ูู ุงูุฏููุง ูุงูุขุฎุฑุฉ.",
];
const parts = Array.from({ length: 30 }, (_, i) => i + 1);
const colors = [
  "#f87171",
  "#60a5fa",
  "#34d399",
  "#facc15",
  "#a78bfa",
  "#f472b6",
  "#818cf8",
  "#14b8a6",
  "#fb923c",
  "#84cc16",
  "#10b981",
  "#06b6d4",
  "#f43f5e",
  "#d946ef",
  "#8b5cf6",
  "#f59e0b",
  "#0ea5e9",
  "#6b7280",
  "#78716c",
  "#71717a",
  "#a3a3a3",
  "#64748b",
  "#f87171",
  "#60a5fa",
  "#34d399",
  "#facc15",
  "#a78bfa",
  "#f472b6",
  "#818cf8",
  "#14b8a6",
];

export default function KhatmaTracker() {
  const [selectedParts, setSelectedParts] = useState(
    () => JSON.parse(localStorage.getItem("selectedParts")) || {}
  );
  const [userNames, setUserNames] = useState(
    () => JSON.parse(localStorage.getItem("userNames")) || {}
  );
  const [userColors, setUserColors] = useState(
    () => JSON.parse(localStorage.getItem("userColors")) || {}
  );
  const [currentUser, setCurrentUser] = useState(
    () => localStorage.getItem("currentUser") || ""
  );
  const [currentColor, setCurrentColor] = useState(
    () => localStorage.getItem("currentColor") || ""
  );
  const [inputName, setInputName] = useState("");
  const [currentPrayer, setCurrentPrayer] = useState(prayers[0]);
  const [showPrayer, setShowPrayer] = useState(true);

  useEffect(() => {
    localStorage.setItem("selectedParts", JSON.stringify(selectedParts));
    localStorage.setItem("userNames", JSON.stringify(userNames));
    localStorage.setItem("userColors", JSON.stringify(userColors));
    localStorage.setItem("currentColor", currentColor);
  }, [selectedParts, userNames, userColors, currentColor]);

  useEffect(() => {
    localStorage.setItem("currentUser", currentUser);
  }, [currentUser]);
  useEffect(() => {
    const interval = setInterval(() => {
      setShowPrayer(true); // ุฅุธูุงุฑ ุงูุฏุนุงุก ุงูุญุงูู

      // ุจุนุฏ 15 ุซุงููุฉ ูููู ุจุชุบููุฑ ุงูุฏุนุงุก
      setTimeout(() => {
        setShowPrayer(false); // ุฅุฎูุงุก ุงูุฏุนุงุก ุงูุญุงูู
        setTimeout(() => {
          const randomPrayer =
            prayers[Math.floor(Math.random() * prayers.length)];
          setCurrentPrayer(randomPrayer); // ุชุบููุฑ ุงูุฏุนุงุก
          setShowPrayer(true); // ุฅุธูุงุฑ ุงูุฏุนุงุก ุงูุฌุฏูุฏ
        }, 9000); // ุชุฃุฎูุฑ ูุตูุฑ ูุจู ุฅุธูุงุฑ ุงูุฏุนุงุก ุงูุฌุฏูุฏ
      }, 9000); // ุฅุฎูุงุก ุงูุฏุนุงุก ุจุนุฏ 15 ุซุงููุฉ
    }, 9000); // ุชูุฑุงุฑ ุงูุนูููุฉ ูู ุฏูููุฉ

    return () => clearInterval(interval); // ุชูุธูู ุงูู interval ุนูุฏ ุงูุฎุฑูุฌ
  }, []);

  const selectColor = (color) => {
    setCurrentColor(color);
    setUserColors((prev) => ({ ...prev, [currentUser]: color }));
  };

  const togglePart = (part) => {
    if (!currentUser.trim()) {
      alert("ูุฑุฌู ุฅุฏุฎุงู ุงุณูู ุงููุงูู ูุจู ุงุฎุชูุงุฑ ุฌุฒุก.");
      return;
    }
    if (!currentColor) {
      alert("ูุฑุฌู ุงุฎุชูุงุฑ ููู ูุจู ุชุญุฏูุฏ ุฌุฒุก.");
      return;
    }
    if (selectedParts[part] && userNames[part] !== currentUser) {
      alert("ูุง ููููู ุชุนุฏูู ุงุฎุชูุงุฑ ูุณุชุฎุฏู ุขุฎุฑ.");
      return;
    }
    setSelectedParts((prev) => {
      const newParts = { ...prev };
      const newUserNames = { ...userNames };
      if (newParts[part]) {
        delete newParts[part];
        delete newUserNames[part];
      } else {
        newParts[part] = currentColor;
        newUserNames[part] = currentUser;
      }
      setUserNames(newUserNames);
      return newParts;
    });
  };

  const resetKhatma = () => {
    setSelectedParts({});
    setUserNames({});
    setUserColors({});
    setCurrentColor("");
  };

  const handleLogin = () => {
    if (inputName.trim().length < 3) {
      alert("ูุฑุฌู ุฅุฏุฎุงู ุงุณูู ุงููุงูู (ุนูู ุงูุฃูู 3 ุฃุญุฑู)");
      return;
    }
    setCurrentUser(inputName.trim());
    setInputName("");
  };

  return (
    <div className="container">
      <h2 className="title reem-kufi">
        ๐ฟ ุฎุชูุฉ ุนูู ุฑูุญ ูุณูุฉ ู ุฌููุน ุฃููุงุช ุงููุณูููู ุฌููุนุง ๐ฟ
      </h2>
      <p className="description reem-kufi">
        ุงูููู ุงุบูุฑ ููุง ูููู ูุงุฑุญููุง ูุงุณูููู ุฌููุนูุง ุงููุฑุฏูุณ ุงูุฃุนูู ูู ุงูุฌูุฉ ุจุฏูู
        ุญุณุงุจ ููุง ุณุงุจูุฉ ุนุฐุงุจุ ุงูููู ุขููู
      </p>
      {!currentUser ? (
        <div className="login-box">
          <input
            type="text"
            placeholder="ุฃุฏุฎู ุงุณูู ุงููุงูู"
            value={inputName}
            onChange={(e) => setInputName(e.target.value)}
            className="input reem-kufi"
          />
          <button className="button green reem-kufi" onClick={handleLogin}>
            ุชุณุฌูู ุงูุฏุฎูู
          </button>
        </div>
      ) : (
        <div className="user-info">
          <p className="reem-kufi">ูุฑุญุจูุงุ {currentUser}</p>
          <button
            className="button logout reem-kufi"
            onClick={() => setCurrentUser("")}
          >
            ุชุณุฌูู ุงูุฎุฑูุฌ
          </button>
        </div>
      )}
      {currentUser && !currentColor && (
        <div className="color-picker">
          <p className="reem-kufi">ุงุฎุชุฑ ูููู ุงููููุฒ:</p>
          <div className="colors">
            {colors.map((color) => (
              <button
                key={color}
                className="color-btn"
                style={{ backgroundColor: color }}
                onClick={() => selectColor(color)}
              />
            ))}
          </div>
        </div>
      )}
      <div className="grid">
        {parts.map((part) => (
          <motion.div
            key={part}
            whileTap={{ scale: 0.9 }}
            className="part-box reem-kufi"
            style={{ backgroundColor: selectedParts[part] || "#e2e8f0" }}
            onClick={() => togglePart(part)}
          >
            {part}
            {userNames[part] && <p className="user-name">{userNames[part]}</p>}
          </motion.div>
        ))}
      </div>
      {Object.keys(selectedParts).length === 30 && (
        <div className="completion-message">
          <p className="reem-kufi">ุชู ุฅููุงู ุงูุฎุชูุฉ! ๐</p>
          <button className="button reset reem-kufi" onClick={resetKhatma}>
            ุฅุนุงุฏุฉ ุงูุชุนููู
          </button>
        </div>
      )}
      {/* Display prayer */}
      <motion.div
        className="prayer-box"
        initial={{ opacity: 0, x: "-100%" }} // ุจุฏุงูุฉ ุงูุนูุตุฑ ูุฎูู ุนูู ุงููุณุงุฑ
        animate={{ opacity: 1, x: 0 }} // ุงูุชุฃุซูุฑ ุจุงูุธููุฑ ูู ุงููุณุงุฑ
        transition={{ type: "spring", stiffness: 100, damping: 25 }} // ุฅุถุงูุฉ ุชุฃุซูุฑ ุงูุงุฑุชุฏุงุฏ (bounce)
      >
        <p className="reem-kufi">{currentPrayer}</p>
      </motion.div>
      {/* Footer */}
      <footer className="footer reem-kufi">
        <p> ๐ค ุฅูุฏุงุก ูุตุฏููู ุงูุนุฒูุฒ ูุญูุฏ ุณูุฏ ุญุณููู</p>
        <p>
          Dieses Werk ist meinem lieben Freund Muhammad Sayed Hassanein
          gewidmet. ๐ค
        </p>
      </footer>
    </div>
  );
}
